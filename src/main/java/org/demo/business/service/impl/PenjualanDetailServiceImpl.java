/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.PenjualanDetail;
import org.demo.bean.jpa.PenjualanDetailEntity;
import org.demo.business.service.PenjualanDetailService;
import org.demo.business.service.mapping.PenjualanDetailServiceMapper;
import org.demo.data.repository.jpa.PenjualanDetailJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PenjualanDetailService
 */
@Component
@Transactional
public class PenjualanDetailServiceImpl implements PenjualanDetailService {

	@Resource
	private PenjualanDetailJpaRepository penjualanDetailJpaRepository;

	@Resource
	private PenjualanDetailServiceMapper penjualanDetailServiceMapper;
	
	@Override
	public PenjualanDetail findById(Integer idPenjualanDetail) {
		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailJpaRepository.findOne(idPenjualanDetail);
		return penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntity);
	}

	@Override
	public List<PenjualanDetail> findAll() {
		Iterable<PenjualanDetailEntity> entities = penjualanDetailJpaRepository.findAll();
		List<PenjualanDetail> beans = new ArrayList<PenjualanDetail>();
		for(PenjualanDetailEntity penjualanDetailEntity : entities) {
			beans.add(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntity));
		}
		return beans;
	}

	@Override
	public PenjualanDetail save(PenjualanDetail penjualanDetail) {
		return update(penjualanDetail) ;
	}

	@Override
	public PenjualanDetail create(PenjualanDetail penjualanDetail) {
		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailJpaRepository.findOne(penjualanDetail.getIdPenjualanDetail());
		if( penjualanDetailEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		penjualanDetailEntity = new PenjualanDetailEntity();
		penjualanDetailServiceMapper.mapPenjualanDetailToPenjualanDetailEntity(penjualanDetail, penjualanDetailEntity);
		PenjualanDetailEntity penjualanDetailEntitySaved = penjualanDetailJpaRepository.save(penjualanDetailEntity);
		return penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntitySaved);
	}

	@Override
	public PenjualanDetail update(PenjualanDetail penjualanDetail) {
		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailJpaRepository.findOne(penjualanDetail.getIdPenjualanDetail());
		penjualanDetailServiceMapper.mapPenjualanDetailToPenjualanDetailEntity(penjualanDetail, penjualanDetailEntity);
		PenjualanDetailEntity penjualanDetailEntitySaved = penjualanDetailJpaRepository.save(penjualanDetailEntity);
		return penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntitySaved);
	}

	@Override
	public void delete(Integer idPenjualanDetail) {
		penjualanDetailJpaRepository.delete(idPenjualanDetail);
	}

	public PenjualanDetailJpaRepository getPenjualanDetailJpaRepository() {
		return penjualanDetailJpaRepository;
	}

	public void setPenjualanDetailJpaRepository(PenjualanDetailJpaRepository penjualanDetailJpaRepository) {
		this.penjualanDetailJpaRepository = penjualanDetailJpaRepository;
	}

	public PenjualanDetailServiceMapper getPenjualanDetailServiceMapper() {
		return penjualanDetailServiceMapper;
	}

	public void setPenjualanDetailServiceMapper(PenjualanDetailServiceMapper penjualanDetailServiceMapper) {
		this.penjualanDetailServiceMapper = penjualanDetailServiceMapper;
	}

}
