/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.demo.bean.PenjualanHeader;
import org.demo.bean.jpa.PenjualanHeaderEntity;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import org.demo.business.service.PenjualanHeaderService;
import org.demo.business.service.mapping.PenjualanHeaderServiceMapper;
import org.demo.data.repository.jpa.PenjualanHeaderJpaRepository;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PenjualanHeaderService
 */
@Component
@Transactional
public class PenjualanHeaderServiceImpl implements PenjualanHeaderService {

	@Resource
	private PenjualanHeaderJpaRepository penjualanHeaderJpaRepository;

	@Resource
	private PenjualanHeaderServiceMapper penjualanHeaderServiceMapper;
	
	@Override
	public PenjualanHeader findById(Integer idPenjualanHeader) {
		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderJpaRepository.findOne(idPenjualanHeader);
		return penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntity);
	}

	@Override
	public List<PenjualanHeader> findAll() {
		Iterable<PenjualanHeaderEntity> entities = penjualanHeaderJpaRepository.findAll();
		List<PenjualanHeader> beans = new ArrayList<PenjualanHeader>();
		for(PenjualanHeaderEntity penjualanHeaderEntity : entities) {
			beans.add(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntity));
		}
		return beans;
	}

	@Override
	public PenjualanHeader save(PenjualanHeader penjualanHeader) {
		return update(penjualanHeader) ;
	}

	@Override
	public PenjualanHeader create(PenjualanHeader penjualanHeader) {
		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderJpaRepository.findOne(penjualanHeader.getIdPenjualanHeader());
		if( penjualanHeaderEntity != null ) {
			throw new IllegalStateException("already.exists");
		}
		penjualanHeaderEntity = new PenjualanHeaderEntity();
		penjualanHeaderServiceMapper.mapPenjualanHeaderToPenjualanHeaderEntity(penjualanHeader, penjualanHeaderEntity);
		PenjualanHeaderEntity penjualanHeaderEntitySaved = penjualanHeaderJpaRepository.save(penjualanHeaderEntity);
		return penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntitySaved);
	}

	@Override
	public PenjualanHeader update(PenjualanHeader penjualanHeader) {
		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderJpaRepository.findOne(penjualanHeader.getIdPenjualanHeader());
		penjualanHeaderServiceMapper.mapPenjualanHeaderToPenjualanHeaderEntity(penjualanHeader, penjualanHeaderEntity);
		PenjualanHeaderEntity penjualanHeaderEntitySaved = penjualanHeaderJpaRepository.save(penjualanHeaderEntity);
		return penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntitySaved);
	}

	@Override
	public void delete(Integer idPenjualanHeader) {
		penjualanHeaderJpaRepository.delete(idPenjualanHeader);
	}

	public PenjualanHeaderJpaRepository getPenjualanHeaderJpaRepository() {
		return penjualanHeaderJpaRepository;
	}

	public void setPenjualanHeaderJpaRepository(PenjualanHeaderJpaRepository penjualanHeaderJpaRepository) {
		this.penjualanHeaderJpaRepository = penjualanHeaderJpaRepository;
	}

	public PenjualanHeaderServiceMapper getPenjualanHeaderServiceMapper() {
		return penjualanHeaderServiceMapper;
	}

	public void setPenjualanHeaderServiceMapper(PenjualanHeaderServiceMapper penjualanHeaderServiceMapper) {
		this.penjualanHeaderServiceMapper = penjualanHeaderServiceMapper;
	}

}
