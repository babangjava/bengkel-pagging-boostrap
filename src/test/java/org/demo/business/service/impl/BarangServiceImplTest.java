/*
 * Created on 25 Jul 2021 ( Time 02:07:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Barang;
import org.demo.bean.jpa.BarangEntity;
import org.demo.business.service.mapping.BarangServiceMapper;
import org.demo.data.repository.jpa.BarangJpaRepository;
import org.demo.test.BarangFactoryForTest;
import org.demo.test.BarangEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of BarangService
 */
@RunWith(MockitoJUnitRunner.class)
public class BarangServiceImplTest {

	@InjectMocks
	private BarangServiceImpl barangService;
	@Mock
	private BarangJpaRepository barangJpaRepository;
	@Mock
	private BarangServiceMapper barangServiceMapper;
	
	private BarangFactoryForTest barangFactoryForTest = new BarangFactoryForTest();

	private BarangEntityFactoryForTest barangEntityFactoryForTest = new BarangEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String kodeBarang = mockValues.nextString(10);
		
		BarangEntity barangEntity = barangJpaRepository.findOne(kodeBarang);
		
		Barang barang = barangFactoryForTest.newBarang();
		when(barangServiceMapper.mapBarangEntityToBarang(barangEntity)).thenReturn(barang);

		// When
		Barang barangFound = barangService.findById(kodeBarang);

		// Then
		assertEquals(barang.getKodeBarang(),barangFound.getKodeBarang());
	}

	@Test
	public void findAll() {
		// Given
		List<BarangEntity> barangEntitys = new ArrayList<BarangEntity>();
		BarangEntity barangEntity1 = barangEntityFactoryForTest.newBarangEntity();
		barangEntitys.add(barangEntity1);
		BarangEntity barangEntity2 = barangEntityFactoryForTest.newBarangEntity();
		barangEntitys.add(barangEntity2);
		when(barangJpaRepository.findAll()).thenReturn(barangEntitys);
		
		Barang barang1 = barangFactoryForTest.newBarang();
		when(barangServiceMapper.mapBarangEntityToBarang(barangEntity1)).thenReturn(barang1);
		Barang barang2 = barangFactoryForTest.newBarang();
		when(barangServiceMapper.mapBarangEntityToBarang(barangEntity2)).thenReturn(barang2);

		// When
		List<Barang> barangsFounds = barangService.findAll();

		// Then
		assertTrue(barang1 == barangsFounds.get(0));
		assertTrue(barang2 == barangsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Barang barang = barangFactoryForTest.newBarang();

		BarangEntity barangEntity = barangEntityFactoryForTest.newBarangEntity();
		when(barangJpaRepository.findOne(barang.getKodeBarang())).thenReturn(null);
		
		barangEntity = new BarangEntity();
		barangServiceMapper.mapBarangToBarangEntity(barang, barangEntity);
		BarangEntity barangEntitySaved = barangJpaRepository.save(barangEntity);
		
		Barang barangSaved = barangFactoryForTest.newBarang();
		when(barangServiceMapper.mapBarangEntityToBarang(barangEntitySaved)).thenReturn(barangSaved);

		// When
		Barang barangResult = barangService.create(barang);

		// Then
		assertTrue(barangResult == barangSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Barang barang = barangFactoryForTest.newBarang();

		BarangEntity barangEntity = barangEntityFactoryForTest.newBarangEntity();
		when(barangJpaRepository.findOne(barang.getKodeBarang())).thenReturn(barangEntity);

		// When
		Exception exception = null;
		try {
			barangService.create(barang);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Barang barang = barangFactoryForTest.newBarang();

		BarangEntity barangEntity = barangEntityFactoryForTest.newBarangEntity();
		when(barangJpaRepository.findOne(barang.getKodeBarang())).thenReturn(barangEntity);
		
		BarangEntity barangEntitySaved = barangEntityFactoryForTest.newBarangEntity();
		when(barangJpaRepository.save(barangEntity)).thenReturn(barangEntitySaved);
		
		Barang barangSaved = barangFactoryForTest.newBarang();
		when(barangServiceMapper.mapBarangEntityToBarang(barangEntitySaved)).thenReturn(barangSaved);

		// When
		Barang barangResult = barangService.update(barang);

		// Then
		verify(barangServiceMapper).mapBarangToBarangEntity(barang, barangEntity);
		assertTrue(barangResult == barangSaved);
	}

	@Test
	public void delete() {
		// Given
		String kodeBarang = mockValues.nextString(10);

		// When
		barangService.delete(kodeBarang);

		// Then
		verify(barangJpaRepository).delete(kodeBarang);
		
	}

}
