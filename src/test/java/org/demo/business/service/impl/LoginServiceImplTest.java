/*
 * Created on 25 Jul 2021 ( Time 02:07:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Login;
import org.demo.bean.jpa.LoginEntity;
import org.demo.business.service.mapping.LoginServiceMapper;
import org.demo.data.repository.jpa.LoginJpaRepository;
import org.demo.test.LoginFactoryForTest;
import org.demo.test.LoginEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of LoginService
 */
@RunWith(MockitoJUnitRunner.class)
public class LoginServiceImplTest {

	@InjectMocks
	private LoginServiceImpl loginService;
	@Mock
	private LoginJpaRepository loginJpaRepository;
	@Mock
	private LoginServiceMapper loginServiceMapper;
	
	private LoginFactoryForTest loginFactoryForTest = new LoginFactoryForTest();

	private LoginEntityFactoryForTest loginEntityFactoryForTest = new LoginEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String userName = mockValues.nextString(45);
		
		LoginEntity loginEntity = loginJpaRepository.findOne(userName);
		
		Login login = loginFactoryForTest.newLogin();
		when(loginServiceMapper.mapLoginEntityToLogin(loginEntity)).thenReturn(login);

		// When
		Login loginFound = loginService.findById(userName);

		// Then
		assertEquals(login.getUserName(),loginFound.getUserName());
	}

	@Test
	public void findAll() {
		// Given
		List<LoginEntity> loginEntitys = new ArrayList<LoginEntity>();
		LoginEntity loginEntity1 = loginEntityFactoryForTest.newLoginEntity();
		loginEntitys.add(loginEntity1);
		LoginEntity loginEntity2 = loginEntityFactoryForTest.newLoginEntity();
		loginEntitys.add(loginEntity2);
		when(loginJpaRepository.findAll()).thenReturn(loginEntitys);
		
		Login login1 = loginFactoryForTest.newLogin();
		when(loginServiceMapper.mapLoginEntityToLogin(loginEntity1)).thenReturn(login1);
		Login login2 = loginFactoryForTest.newLogin();
		when(loginServiceMapper.mapLoginEntityToLogin(loginEntity2)).thenReturn(login2);

		// When
		List<Login> loginsFounds = loginService.findAll();

		// Then
		assertTrue(login1 == loginsFounds.get(0));
		assertTrue(login2 == loginsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Login login = loginFactoryForTest.newLogin();

		LoginEntity loginEntity = loginEntityFactoryForTest.newLoginEntity();
		when(loginJpaRepository.findOne(login.getUserName())).thenReturn(null);
		
		loginEntity = new LoginEntity();
		loginServiceMapper.mapLoginToLoginEntity(login, loginEntity);
		LoginEntity loginEntitySaved = loginJpaRepository.save(loginEntity);
		
		Login loginSaved = loginFactoryForTest.newLogin();
		when(loginServiceMapper.mapLoginEntityToLogin(loginEntitySaved)).thenReturn(loginSaved);

		// When
		Login loginResult = loginService.create(login);

		// Then
		assertTrue(loginResult == loginSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Login login = loginFactoryForTest.newLogin();

		LoginEntity loginEntity = loginEntityFactoryForTest.newLoginEntity();
		when(loginJpaRepository.findOne(login.getUserName())).thenReturn(loginEntity);

		// When
		Exception exception = null;
		try {
			loginService.create(login);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Login login = loginFactoryForTest.newLogin();

		LoginEntity loginEntity = loginEntityFactoryForTest.newLoginEntity();
		when(loginJpaRepository.findOne(login.getUserName())).thenReturn(loginEntity);
		
		LoginEntity loginEntitySaved = loginEntityFactoryForTest.newLoginEntity();
		when(loginJpaRepository.save(loginEntity)).thenReturn(loginEntitySaved);
		
		Login loginSaved = loginFactoryForTest.newLogin();
		when(loginServiceMapper.mapLoginEntityToLogin(loginEntitySaved)).thenReturn(loginSaved);

		// When
		Login loginResult = loginService.update(login);

		// Then
		verify(loginServiceMapper).mapLoginToLoginEntity(login, loginEntity);
		assertTrue(loginResult == loginSaved);
	}

	@Test
	public void delete() {
		// Given
		String userName = mockValues.nextString(45);

		// When
		loginService.delete(userName);

		// Then
		verify(loginJpaRepository).delete(userName);
		
	}

}
