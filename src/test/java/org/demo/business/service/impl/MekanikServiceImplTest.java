/*
 * Created on 25 Jul 2021 ( Time 02:07:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.Mekanik;
import org.demo.bean.jpa.MekanikEntity;
import org.demo.business.service.mapping.MekanikServiceMapper;
import org.demo.data.repository.jpa.MekanikJpaRepository;
import org.demo.test.MekanikFactoryForTest;
import org.demo.test.MekanikEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of MekanikService
 */
@RunWith(MockitoJUnitRunner.class)
public class MekanikServiceImplTest {

	@InjectMocks
	private MekanikServiceImpl mekanikService;
	@Mock
	private MekanikJpaRepository mekanikJpaRepository;
	@Mock
	private MekanikServiceMapper mekanikServiceMapper;
	
	private MekanikFactoryForTest mekanikFactoryForTest = new MekanikFactoryForTest();

	private MekanikEntityFactoryForTest mekanikEntityFactoryForTest = new MekanikEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		String idMekanik = mockValues.nextString(15);
		
		MekanikEntity mekanikEntity = mekanikJpaRepository.findOne(idMekanik);
		
		Mekanik mekanik = mekanikFactoryForTest.newMekanik();
		when(mekanikServiceMapper.mapMekanikEntityToMekanik(mekanikEntity)).thenReturn(mekanik);

		// When
		Mekanik mekanikFound = mekanikService.findById(idMekanik);

		// Then
		assertEquals(mekanik.getIdMekanik(),mekanikFound.getIdMekanik());
	}

	@Test
	public void findAll() {
		// Given
		List<MekanikEntity> mekanikEntitys = new ArrayList<MekanikEntity>();
		MekanikEntity mekanikEntity1 = mekanikEntityFactoryForTest.newMekanikEntity();
		mekanikEntitys.add(mekanikEntity1);
		MekanikEntity mekanikEntity2 = mekanikEntityFactoryForTest.newMekanikEntity();
		mekanikEntitys.add(mekanikEntity2);
		when(mekanikJpaRepository.findAll()).thenReturn(mekanikEntitys);
		
		Mekanik mekanik1 = mekanikFactoryForTest.newMekanik();
		when(mekanikServiceMapper.mapMekanikEntityToMekanik(mekanikEntity1)).thenReturn(mekanik1);
		Mekanik mekanik2 = mekanikFactoryForTest.newMekanik();
		when(mekanikServiceMapper.mapMekanikEntityToMekanik(mekanikEntity2)).thenReturn(mekanik2);

		// When
		List<Mekanik> mekaniksFounds = mekanikService.findAll();

		// Then
		assertTrue(mekanik1 == mekaniksFounds.get(0));
		assertTrue(mekanik2 == mekaniksFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		Mekanik mekanik = mekanikFactoryForTest.newMekanik();

		MekanikEntity mekanikEntity = mekanikEntityFactoryForTest.newMekanikEntity();
		when(mekanikJpaRepository.findOne(mekanik.getIdMekanik())).thenReturn(null);
		
		mekanikEntity = new MekanikEntity();
		mekanikServiceMapper.mapMekanikToMekanikEntity(mekanik, mekanikEntity);
		MekanikEntity mekanikEntitySaved = mekanikJpaRepository.save(mekanikEntity);
		
		Mekanik mekanikSaved = mekanikFactoryForTest.newMekanik();
		when(mekanikServiceMapper.mapMekanikEntityToMekanik(mekanikEntitySaved)).thenReturn(mekanikSaved);

		// When
		Mekanik mekanikResult = mekanikService.create(mekanik);

		// Then
		assertTrue(mekanikResult == mekanikSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		Mekanik mekanik = mekanikFactoryForTest.newMekanik();

		MekanikEntity mekanikEntity = mekanikEntityFactoryForTest.newMekanikEntity();
		when(mekanikJpaRepository.findOne(mekanik.getIdMekanik())).thenReturn(mekanikEntity);

		// When
		Exception exception = null;
		try {
			mekanikService.create(mekanik);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		Mekanik mekanik = mekanikFactoryForTest.newMekanik();

		MekanikEntity mekanikEntity = mekanikEntityFactoryForTest.newMekanikEntity();
		when(mekanikJpaRepository.findOne(mekanik.getIdMekanik())).thenReturn(mekanikEntity);
		
		MekanikEntity mekanikEntitySaved = mekanikEntityFactoryForTest.newMekanikEntity();
		when(mekanikJpaRepository.save(mekanikEntity)).thenReturn(mekanikEntitySaved);
		
		Mekanik mekanikSaved = mekanikFactoryForTest.newMekanik();
		when(mekanikServiceMapper.mapMekanikEntityToMekanik(mekanikEntitySaved)).thenReturn(mekanikSaved);

		// When
		Mekanik mekanikResult = mekanikService.update(mekanik);

		// Then
		verify(mekanikServiceMapper).mapMekanikToMekanikEntity(mekanik, mekanikEntity);
		assertTrue(mekanikResult == mekanikSaved);
	}

	@Test
	public void delete() {
		// Given
		String idMekanik = mockValues.nextString(15);

		// When
		mekanikService.delete(idMekanik);

		// Then
		verify(mekanikJpaRepository).delete(idMekanik);
		
	}

}
