/*
 * Created on 25 Jul 2021 ( Time 02:07:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.PembelianDetail;
import org.demo.bean.jpa.PembelianDetailEntity;
import org.demo.business.service.mapping.PembelianDetailServiceMapper;
import org.demo.data.repository.jpa.PembelianDetailJpaRepository;
import org.demo.test.PembelianDetailFactoryForTest;
import org.demo.test.PembelianDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PembelianDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class PembelianDetailServiceImplTest {

	@InjectMocks
	private PembelianDetailServiceImpl pembelianDetailService;
	@Mock
	private PembelianDetailJpaRepository pembelianDetailJpaRepository;
	@Mock
	private PembelianDetailServiceMapper pembelianDetailServiceMapper;
	
	private PembelianDetailFactoryForTest pembelianDetailFactoryForTest = new PembelianDetailFactoryForTest();

	private PembelianDetailEntityFactoryForTest pembelianDetailEntityFactoryForTest = new PembelianDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idPembelianDetail = mockValues.nextInteger();
		
		PembelianDetailEntity pembelianDetailEntity = pembelianDetailJpaRepository.findOne(idPembelianDetail);
		
		PembelianDetail pembelianDetail = pembelianDetailFactoryForTest.newPembelianDetail();
		when(pembelianDetailServiceMapper.mapPembelianDetailEntityToPembelianDetail(pembelianDetailEntity)).thenReturn(pembelianDetail);

		// When
		PembelianDetail pembelianDetailFound = pembelianDetailService.findById(idPembelianDetail);

		// Then
		assertEquals(pembelianDetail.getIdPembelianDetail(),pembelianDetailFound.getIdPembelianDetail());
	}

	@Test
	public void findAll() {
		// Given
		List<PembelianDetailEntity> pembelianDetailEntitys = new ArrayList<PembelianDetailEntity>();
		PembelianDetailEntity pembelianDetailEntity1 = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		pembelianDetailEntitys.add(pembelianDetailEntity1);
		PembelianDetailEntity pembelianDetailEntity2 = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		pembelianDetailEntitys.add(pembelianDetailEntity2);
		when(pembelianDetailJpaRepository.findAll()).thenReturn(pembelianDetailEntitys);
		
		PembelianDetail pembelianDetail1 = pembelianDetailFactoryForTest.newPembelianDetail();
		when(pembelianDetailServiceMapper.mapPembelianDetailEntityToPembelianDetail(pembelianDetailEntity1)).thenReturn(pembelianDetail1);
		PembelianDetail pembelianDetail2 = pembelianDetailFactoryForTest.newPembelianDetail();
		when(pembelianDetailServiceMapper.mapPembelianDetailEntityToPembelianDetail(pembelianDetailEntity2)).thenReturn(pembelianDetail2);

		// When
		List<PembelianDetail> pembelianDetailsFounds = pembelianDetailService.findAll();

		// Then
		assertTrue(pembelianDetail1 == pembelianDetailsFounds.get(0));
		assertTrue(pembelianDetail2 == pembelianDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PembelianDetail pembelianDetail = pembelianDetailFactoryForTest.newPembelianDetail();

		PembelianDetailEntity pembelianDetailEntity = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		when(pembelianDetailJpaRepository.findOne(pembelianDetail.getIdPembelianDetail())).thenReturn(null);
		
		pembelianDetailEntity = new PembelianDetailEntity();
		pembelianDetailServiceMapper.mapPembelianDetailToPembelianDetailEntity(pembelianDetail, pembelianDetailEntity);
		PembelianDetailEntity pembelianDetailEntitySaved = pembelianDetailJpaRepository.save(pembelianDetailEntity);
		
		PembelianDetail pembelianDetailSaved = pembelianDetailFactoryForTest.newPembelianDetail();
		when(pembelianDetailServiceMapper.mapPembelianDetailEntityToPembelianDetail(pembelianDetailEntitySaved)).thenReturn(pembelianDetailSaved);

		// When
		PembelianDetail pembelianDetailResult = pembelianDetailService.create(pembelianDetail);

		// Then
		assertTrue(pembelianDetailResult == pembelianDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PembelianDetail pembelianDetail = pembelianDetailFactoryForTest.newPembelianDetail();

		PembelianDetailEntity pembelianDetailEntity = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		when(pembelianDetailJpaRepository.findOne(pembelianDetail.getIdPembelianDetail())).thenReturn(pembelianDetailEntity);

		// When
		Exception exception = null;
		try {
			pembelianDetailService.create(pembelianDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PembelianDetail pembelianDetail = pembelianDetailFactoryForTest.newPembelianDetail();

		PembelianDetailEntity pembelianDetailEntity = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		when(pembelianDetailJpaRepository.findOne(pembelianDetail.getIdPembelianDetail())).thenReturn(pembelianDetailEntity);
		
		PembelianDetailEntity pembelianDetailEntitySaved = pembelianDetailEntityFactoryForTest.newPembelianDetailEntity();
		when(pembelianDetailJpaRepository.save(pembelianDetailEntity)).thenReturn(pembelianDetailEntitySaved);
		
		PembelianDetail pembelianDetailSaved = pembelianDetailFactoryForTest.newPembelianDetail();
		when(pembelianDetailServiceMapper.mapPembelianDetailEntityToPembelianDetail(pembelianDetailEntitySaved)).thenReturn(pembelianDetailSaved);

		// When
		PembelianDetail pembelianDetailResult = pembelianDetailService.update(pembelianDetail);

		// Then
		verify(pembelianDetailServiceMapper).mapPembelianDetailToPembelianDetailEntity(pembelianDetail, pembelianDetailEntity);
		assertTrue(pembelianDetailResult == pembelianDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idPembelianDetail = mockValues.nextInteger();

		// When
		pembelianDetailService.delete(idPembelianDetail);

		// Then
		verify(pembelianDetailJpaRepository).delete(idPembelianDetail);
		
	}

}
