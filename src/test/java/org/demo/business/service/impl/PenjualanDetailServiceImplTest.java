/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.PenjualanDetail;
import org.demo.bean.jpa.PenjualanDetailEntity;
import org.demo.business.service.mapping.PenjualanDetailServiceMapper;
import org.demo.data.repository.jpa.PenjualanDetailJpaRepository;
import org.demo.test.PenjualanDetailFactoryForTest;
import org.demo.test.PenjualanDetailEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PenjualanDetailService
 */
@RunWith(MockitoJUnitRunner.class)
public class PenjualanDetailServiceImplTest {

	@InjectMocks
	private PenjualanDetailServiceImpl penjualanDetailService;
	@Mock
	private PenjualanDetailJpaRepository penjualanDetailJpaRepository;
	@Mock
	private PenjualanDetailServiceMapper penjualanDetailServiceMapper;
	
	private PenjualanDetailFactoryForTest penjualanDetailFactoryForTest = new PenjualanDetailFactoryForTest();

	private PenjualanDetailEntityFactoryForTest penjualanDetailEntityFactoryForTest = new PenjualanDetailEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idPenjualanDetail = mockValues.nextInteger();
		
		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailJpaRepository.findOne(idPenjualanDetail);
		
		PenjualanDetail penjualanDetail = penjualanDetailFactoryForTest.newPenjualanDetail();
		when(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntity)).thenReturn(penjualanDetail);

		// When
		PenjualanDetail penjualanDetailFound = penjualanDetailService.findById(idPenjualanDetail);

		// Then
		assertEquals(penjualanDetail.getIdPenjualanDetail(),penjualanDetailFound.getIdPenjualanDetail());
	}

	@Test
	public void findAll() {
		// Given
		List<PenjualanDetailEntity> penjualanDetailEntitys = new ArrayList<PenjualanDetailEntity>();
		PenjualanDetailEntity penjualanDetailEntity1 = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		penjualanDetailEntitys.add(penjualanDetailEntity1);
		PenjualanDetailEntity penjualanDetailEntity2 = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		penjualanDetailEntitys.add(penjualanDetailEntity2);
		when(penjualanDetailJpaRepository.findAll()).thenReturn(penjualanDetailEntitys);
		
		PenjualanDetail penjualanDetail1 = penjualanDetailFactoryForTest.newPenjualanDetail();
		when(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntity1)).thenReturn(penjualanDetail1);
		PenjualanDetail penjualanDetail2 = penjualanDetailFactoryForTest.newPenjualanDetail();
		when(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntity2)).thenReturn(penjualanDetail2);

		// When
		List<PenjualanDetail> penjualanDetailsFounds = penjualanDetailService.findAll();

		// Then
		assertTrue(penjualanDetail1 == penjualanDetailsFounds.get(0));
		assertTrue(penjualanDetail2 == penjualanDetailsFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PenjualanDetail penjualanDetail = penjualanDetailFactoryForTest.newPenjualanDetail();

		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		when(penjualanDetailJpaRepository.findOne(penjualanDetail.getIdPenjualanDetail())).thenReturn(null);
		
		penjualanDetailEntity = new PenjualanDetailEntity();
		penjualanDetailServiceMapper.mapPenjualanDetailToPenjualanDetailEntity(penjualanDetail, penjualanDetailEntity);
		PenjualanDetailEntity penjualanDetailEntitySaved = penjualanDetailJpaRepository.save(penjualanDetailEntity);
		
		PenjualanDetail penjualanDetailSaved = penjualanDetailFactoryForTest.newPenjualanDetail();
		when(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntitySaved)).thenReturn(penjualanDetailSaved);

		// When
		PenjualanDetail penjualanDetailResult = penjualanDetailService.create(penjualanDetail);

		// Then
		assertTrue(penjualanDetailResult == penjualanDetailSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PenjualanDetail penjualanDetail = penjualanDetailFactoryForTest.newPenjualanDetail();

		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		when(penjualanDetailJpaRepository.findOne(penjualanDetail.getIdPenjualanDetail())).thenReturn(penjualanDetailEntity);

		// When
		Exception exception = null;
		try {
			penjualanDetailService.create(penjualanDetail);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PenjualanDetail penjualanDetail = penjualanDetailFactoryForTest.newPenjualanDetail();

		PenjualanDetailEntity penjualanDetailEntity = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		when(penjualanDetailJpaRepository.findOne(penjualanDetail.getIdPenjualanDetail())).thenReturn(penjualanDetailEntity);
		
		PenjualanDetailEntity penjualanDetailEntitySaved = penjualanDetailEntityFactoryForTest.newPenjualanDetailEntity();
		when(penjualanDetailJpaRepository.save(penjualanDetailEntity)).thenReturn(penjualanDetailEntitySaved);
		
		PenjualanDetail penjualanDetailSaved = penjualanDetailFactoryForTest.newPenjualanDetail();
		when(penjualanDetailServiceMapper.mapPenjualanDetailEntityToPenjualanDetail(penjualanDetailEntitySaved)).thenReturn(penjualanDetailSaved);

		// When
		PenjualanDetail penjualanDetailResult = penjualanDetailService.update(penjualanDetail);

		// Then
		verify(penjualanDetailServiceMapper).mapPenjualanDetailToPenjualanDetailEntity(penjualanDetail, penjualanDetailEntity);
		assertTrue(penjualanDetailResult == penjualanDetailSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idPenjualanDetail = mockValues.nextInteger();

		// When
		penjualanDetailService.delete(idPenjualanDetail);

		// Then
		verify(penjualanDetailJpaRepository).delete(idPenjualanDetail);
		
	}

}
