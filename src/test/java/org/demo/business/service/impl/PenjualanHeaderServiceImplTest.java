/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.PenjualanHeader;
import org.demo.bean.jpa.PenjualanHeaderEntity;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import org.demo.business.service.mapping.PenjualanHeaderServiceMapper;
import org.demo.data.repository.jpa.PenjualanHeaderJpaRepository;
import org.demo.test.PenjualanHeaderFactoryForTest;
import org.demo.test.PenjualanHeaderEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of PenjualanHeaderService
 */
@RunWith(MockitoJUnitRunner.class)
public class PenjualanHeaderServiceImplTest {

	@InjectMocks
	private PenjualanHeaderServiceImpl penjualanHeaderService;
	@Mock
	private PenjualanHeaderJpaRepository penjualanHeaderJpaRepository;
	@Mock
	private PenjualanHeaderServiceMapper penjualanHeaderServiceMapper;
	
	private PenjualanHeaderFactoryForTest penjualanHeaderFactoryForTest = new PenjualanHeaderFactoryForTest();

	private PenjualanHeaderEntityFactoryForTest penjualanHeaderEntityFactoryForTest = new PenjualanHeaderEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idPenjualanHeader = mockValues.nextInteger();
		
		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderJpaRepository.findOne(idPenjualanHeader);
		
		PenjualanHeader penjualanHeader = penjualanHeaderFactoryForTest.newPenjualanHeader();
		when(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntity)).thenReturn(penjualanHeader);

		// When
		PenjualanHeader penjualanHeaderFound = penjualanHeaderService.findById(idPenjualanHeader);

		// Then
		assertEquals(penjualanHeader.getIdPenjualanHeader(),penjualanHeaderFound.getIdPenjualanHeader());
	}

	@Test
	public void findAll() {
		// Given
		List<PenjualanHeaderEntity> penjualanHeaderEntitys = new ArrayList<PenjualanHeaderEntity>();
		PenjualanHeaderEntity penjualanHeaderEntity1 = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		penjualanHeaderEntitys.add(penjualanHeaderEntity1);
		PenjualanHeaderEntity penjualanHeaderEntity2 = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		penjualanHeaderEntitys.add(penjualanHeaderEntity2);
		when(penjualanHeaderJpaRepository.findAll()).thenReturn(penjualanHeaderEntitys);
		
		PenjualanHeader penjualanHeader1 = penjualanHeaderFactoryForTest.newPenjualanHeader();
		when(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntity1)).thenReturn(penjualanHeader1);
		PenjualanHeader penjualanHeader2 = penjualanHeaderFactoryForTest.newPenjualanHeader();
		when(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntity2)).thenReturn(penjualanHeader2);

		// When
		List<PenjualanHeader> penjualanHeadersFounds = penjualanHeaderService.findAll();

		// Then
		assertTrue(penjualanHeader1 == penjualanHeadersFounds.get(0));
		assertTrue(penjualanHeader2 == penjualanHeadersFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		PenjualanHeader penjualanHeader = penjualanHeaderFactoryForTest.newPenjualanHeader();

		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		when(penjualanHeaderJpaRepository.findOne(penjualanHeader.getIdPenjualanHeader())).thenReturn(null);
		
		penjualanHeaderEntity = new PenjualanHeaderEntity();
		penjualanHeaderServiceMapper.mapPenjualanHeaderToPenjualanHeaderEntity(penjualanHeader, penjualanHeaderEntity);
		PenjualanHeaderEntity penjualanHeaderEntitySaved = penjualanHeaderJpaRepository.save(penjualanHeaderEntity);
		
		PenjualanHeader penjualanHeaderSaved = penjualanHeaderFactoryForTest.newPenjualanHeader();
		when(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntitySaved)).thenReturn(penjualanHeaderSaved);

		// When
		PenjualanHeader penjualanHeaderResult = penjualanHeaderService.create(penjualanHeader);

		// Then
		assertTrue(penjualanHeaderResult == penjualanHeaderSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		PenjualanHeader penjualanHeader = penjualanHeaderFactoryForTest.newPenjualanHeader();

		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		when(penjualanHeaderJpaRepository.findOne(penjualanHeader.getIdPenjualanHeader())).thenReturn(penjualanHeaderEntity);

		// When
		Exception exception = null;
		try {
			penjualanHeaderService.create(penjualanHeader);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		PenjualanHeader penjualanHeader = penjualanHeaderFactoryForTest.newPenjualanHeader();

		PenjualanHeaderEntity penjualanHeaderEntity = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		when(penjualanHeaderJpaRepository.findOne(penjualanHeader.getIdPenjualanHeader())).thenReturn(penjualanHeaderEntity);
		
		PenjualanHeaderEntity penjualanHeaderEntitySaved = penjualanHeaderEntityFactoryForTest.newPenjualanHeaderEntity();
		when(penjualanHeaderJpaRepository.save(penjualanHeaderEntity)).thenReturn(penjualanHeaderEntitySaved);
		
		PenjualanHeader penjualanHeaderSaved = penjualanHeaderFactoryForTest.newPenjualanHeader();
		when(penjualanHeaderServiceMapper.mapPenjualanHeaderEntityToPenjualanHeader(penjualanHeaderEntitySaved)).thenReturn(penjualanHeaderSaved);

		// When
		PenjualanHeader penjualanHeaderResult = penjualanHeaderService.update(penjualanHeader);

		// Then
		verify(penjualanHeaderServiceMapper).mapPenjualanHeaderToPenjualanHeaderEntity(penjualanHeader, penjualanHeaderEntity);
		assertTrue(penjualanHeaderResult == penjualanHeaderSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idPenjualanHeader = mockValues.nextInteger();

		// When
		penjualanHeaderService.delete(idPenjualanHeader);

		// Then
		verify(penjualanHeaderJpaRepository).delete(idPenjualanHeader);
		
	}

}
