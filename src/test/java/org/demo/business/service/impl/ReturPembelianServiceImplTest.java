/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ReturPembelian;
import org.demo.bean.jpa.ReturPembelianEntity;
import java.util.Date;
import org.demo.business.service.mapping.ReturPembelianServiceMapper;
import org.demo.data.repository.jpa.ReturPembelianJpaRepository;
import org.demo.test.ReturPembelianFactoryForTest;
import org.demo.test.ReturPembelianEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReturPembelianService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReturPembelianServiceImplTest {

	@InjectMocks
	private ReturPembelianServiceImpl returPembelianService;
	@Mock
	private ReturPembelianJpaRepository returPembelianJpaRepository;
	@Mock
	private ReturPembelianServiceMapper returPembelianServiceMapper;
	
	private ReturPembelianFactoryForTest returPembelianFactoryForTest = new ReturPembelianFactoryForTest();

	private ReturPembelianEntityFactoryForTest returPembelianEntityFactoryForTest = new ReturPembelianEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idreturPembelian = mockValues.nextInteger();
		
		ReturPembelianEntity returPembelianEntity = returPembelianJpaRepository.findOne(idreturPembelian);
		
		ReturPembelian returPembelian = returPembelianFactoryForTest.newReturPembelian();
		when(returPembelianServiceMapper.mapReturPembelianEntityToReturPembelian(returPembelianEntity)).thenReturn(returPembelian);

		// When
		ReturPembelian returPembelianFound = returPembelianService.findById(idreturPembelian);

		// Then
		assertEquals(returPembelian.getIdreturPembelian(),returPembelianFound.getIdreturPembelian());
	}

	@Test
	public void findAll() {
		// Given
		List<ReturPembelianEntity> returPembelianEntitys = new ArrayList<ReturPembelianEntity>();
		ReturPembelianEntity returPembelianEntity1 = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		returPembelianEntitys.add(returPembelianEntity1);
		ReturPembelianEntity returPembelianEntity2 = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		returPembelianEntitys.add(returPembelianEntity2);
		when(returPembelianJpaRepository.findAll()).thenReturn(returPembelianEntitys);
		
		ReturPembelian returPembelian1 = returPembelianFactoryForTest.newReturPembelian();
		when(returPembelianServiceMapper.mapReturPembelianEntityToReturPembelian(returPembelianEntity1)).thenReturn(returPembelian1);
		ReturPembelian returPembelian2 = returPembelianFactoryForTest.newReturPembelian();
		when(returPembelianServiceMapper.mapReturPembelianEntityToReturPembelian(returPembelianEntity2)).thenReturn(returPembelian2);

		// When
		List<ReturPembelian> returPembeliansFounds = returPembelianService.findAll();

		// Then
		assertTrue(returPembelian1 == returPembeliansFounds.get(0));
		assertTrue(returPembelian2 == returPembeliansFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ReturPembelian returPembelian = returPembelianFactoryForTest.newReturPembelian();

		ReturPembelianEntity returPembelianEntity = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		when(returPembelianJpaRepository.findOne(returPembelian.getIdreturPembelian())).thenReturn(null);
		
		returPembelianEntity = new ReturPembelianEntity();
		returPembelianServiceMapper.mapReturPembelianToReturPembelianEntity(returPembelian, returPembelianEntity);
		ReturPembelianEntity returPembelianEntitySaved = returPembelianJpaRepository.save(returPembelianEntity);
		
		ReturPembelian returPembelianSaved = returPembelianFactoryForTest.newReturPembelian();
		when(returPembelianServiceMapper.mapReturPembelianEntityToReturPembelian(returPembelianEntitySaved)).thenReturn(returPembelianSaved);

		// When
		ReturPembelian returPembelianResult = returPembelianService.create(returPembelian);

		// Then
		assertTrue(returPembelianResult == returPembelianSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ReturPembelian returPembelian = returPembelianFactoryForTest.newReturPembelian();

		ReturPembelianEntity returPembelianEntity = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		when(returPembelianJpaRepository.findOne(returPembelian.getIdreturPembelian())).thenReturn(returPembelianEntity);

		// When
		Exception exception = null;
		try {
			returPembelianService.create(returPembelian);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ReturPembelian returPembelian = returPembelianFactoryForTest.newReturPembelian();

		ReturPembelianEntity returPembelianEntity = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		when(returPembelianJpaRepository.findOne(returPembelian.getIdreturPembelian())).thenReturn(returPembelianEntity);
		
		ReturPembelianEntity returPembelianEntitySaved = returPembelianEntityFactoryForTest.newReturPembelianEntity();
		when(returPembelianJpaRepository.save(returPembelianEntity)).thenReturn(returPembelianEntitySaved);
		
		ReturPembelian returPembelianSaved = returPembelianFactoryForTest.newReturPembelian();
		when(returPembelianServiceMapper.mapReturPembelianEntityToReturPembelian(returPembelianEntitySaved)).thenReturn(returPembelianSaved);

		// When
		ReturPembelian returPembelianResult = returPembelianService.update(returPembelian);

		// Then
		verify(returPembelianServiceMapper).mapReturPembelianToReturPembelianEntity(returPembelian, returPembelianEntity);
		assertTrue(returPembelianResult == returPembelianSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idreturPembelian = mockValues.nextInteger();

		// When
		returPembelianService.delete(idreturPembelian);

		// Then
		verify(returPembelianJpaRepository).delete(idreturPembelian);
		
	}

}
