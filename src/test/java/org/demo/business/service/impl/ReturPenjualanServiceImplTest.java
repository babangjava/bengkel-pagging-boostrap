/*
 * Created on 25 Jul 2021 ( Time 02:07:43 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.business.service.impl;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.demo.bean.ReturPenjualan;
import org.demo.bean.jpa.ReturPenjualanEntity;
import java.util.Date;
import org.demo.business.service.mapping.ReturPenjualanServiceMapper;
import org.demo.data.repository.jpa.ReturPenjualanJpaRepository;
import org.demo.test.ReturPenjualanFactoryForTest;
import org.demo.test.ReturPenjualanEntityFactoryForTest;
import org.demo.test.MockValues;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

/**
 * Test : Implementation of ReturPenjualanService
 */
@RunWith(MockitoJUnitRunner.class)
public class ReturPenjualanServiceImplTest {

	@InjectMocks
	private ReturPenjualanServiceImpl returPenjualanService;
	@Mock
	private ReturPenjualanJpaRepository returPenjualanJpaRepository;
	@Mock
	private ReturPenjualanServiceMapper returPenjualanServiceMapper;
	
	private ReturPenjualanFactoryForTest returPenjualanFactoryForTest = new ReturPenjualanFactoryForTest();

	private ReturPenjualanEntityFactoryForTest returPenjualanEntityFactoryForTest = new ReturPenjualanEntityFactoryForTest();

	private MockValues mockValues = new MockValues();
	
	@Test
	public void findById() {
		// Given
		Integer idreturPenjualan = mockValues.nextInteger();
		
		ReturPenjualanEntity returPenjualanEntity = returPenjualanJpaRepository.findOne(idreturPenjualan);
		
		ReturPenjualan returPenjualan = returPenjualanFactoryForTest.newReturPenjualan();
		when(returPenjualanServiceMapper.mapReturPenjualanEntityToReturPenjualan(returPenjualanEntity)).thenReturn(returPenjualan);

		// When
		ReturPenjualan returPenjualanFound = returPenjualanService.findById(idreturPenjualan);

		// Then
		assertEquals(returPenjualan.getIdreturPenjualan(),returPenjualanFound.getIdreturPenjualan());
	}

	@Test
	public void findAll() {
		// Given
		List<ReturPenjualanEntity> returPenjualanEntitys = new ArrayList<ReturPenjualanEntity>();
		ReturPenjualanEntity returPenjualanEntity1 = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		returPenjualanEntitys.add(returPenjualanEntity1);
		ReturPenjualanEntity returPenjualanEntity2 = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		returPenjualanEntitys.add(returPenjualanEntity2);
		when(returPenjualanJpaRepository.findAll()).thenReturn(returPenjualanEntitys);
		
		ReturPenjualan returPenjualan1 = returPenjualanFactoryForTest.newReturPenjualan();
		when(returPenjualanServiceMapper.mapReturPenjualanEntityToReturPenjualan(returPenjualanEntity1)).thenReturn(returPenjualan1);
		ReturPenjualan returPenjualan2 = returPenjualanFactoryForTest.newReturPenjualan();
		when(returPenjualanServiceMapper.mapReturPenjualanEntityToReturPenjualan(returPenjualanEntity2)).thenReturn(returPenjualan2);

		// When
		List<ReturPenjualan> returPenjualansFounds = returPenjualanService.findAll();

		// Then
		assertTrue(returPenjualan1 == returPenjualansFounds.get(0));
		assertTrue(returPenjualan2 == returPenjualansFounds.get(1));
	}

	@Test
	public void create() {
		// Given
		ReturPenjualan returPenjualan = returPenjualanFactoryForTest.newReturPenjualan();

		ReturPenjualanEntity returPenjualanEntity = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		when(returPenjualanJpaRepository.findOne(returPenjualan.getIdreturPenjualan())).thenReturn(null);
		
		returPenjualanEntity = new ReturPenjualanEntity();
		returPenjualanServiceMapper.mapReturPenjualanToReturPenjualanEntity(returPenjualan, returPenjualanEntity);
		ReturPenjualanEntity returPenjualanEntitySaved = returPenjualanJpaRepository.save(returPenjualanEntity);
		
		ReturPenjualan returPenjualanSaved = returPenjualanFactoryForTest.newReturPenjualan();
		when(returPenjualanServiceMapper.mapReturPenjualanEntityToReturPenjualan(returPenjualanEntitySaved)).thenReturn(returPenjualanSaved);

		// When
		ReturPenjualan returPenjualanResult = returPenjualanService.create(returPenjualan);

		// Then
		assertTrue(returPenjualanResult == returPenjualanSaved);
	}

	@Test
	public void createKOExists() {
		// Given
		ReturPenjualan returPenjualan = returPenjualanFactoryForTest.newReturPenjualan();

		ReturPenjualanEntity returPenjualanEntity = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		when(returPenjualanJpaRepository.findOne(returPenjualan.getIdreturPenjualan())).thenReturn(returPenjualanEntity);

		// When
		Exception exception = null;
		try {
			returPenjualanService.create(returPenjualan);
		} catch(Exception e) {
			exception = e;
		}

		// Then
		assertTrue(exception instanceof IllegalStateException);
		assertEquals("already.exists", exception.getMessage());
	}

	@Test
	public void update() {
		// Given
		ReturPenjualan returPenjualan = returPenjualanFactoryForTest.newReturPenjualan();

		ReturPenjualanEntity returPenjualanEntity = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		when(returPenjualanJpaRepository.findOne(returPenjualan.getIdreturPenjualan())).thenReturn(returPenjualanEntity);
		
		ReturPenjualanEntity returPenjualanEntitySaved = returPenjualanEntityFactoryForTest.newReturPenjualanEntity();
		when(returPenjualanJpaRepository.save(returPenjualanEntity)).thenReturn(returPenjualanEntitySaved);
		
		ReturPenjualan returPenjualanSaved = returPenjualanFactoryForTest.newReturPenjualan();
		when(returPenjualanServiceMapper.mapReturPenjualanEntityToReturPenjualan(returPenjualanEntitySaved)).thenReturn(returPenjualanSaved);

		// When
		ReturPenjualan returPenjualanResult = returPenjualanService.update(returPenjualan);

		// Then
		verify(returPenjualanServiceMapper).mapReturPenjualanToReturPenjualanEntity(returPenjualan, returPenjualanEntity);
		assertTrue(returPenjualanResult == returPenjualanSaved);
	}

	@Test
	public void delete() {
		// Given
		Integer idreturPenjualan = mockValues.nextInteger();

		// When
		returPenjualanService.delete(idreturPenjualan);

		// Then
		verify(returPenjualanJpaRepository).delete(idreturPenjualan);
		
	}

}
